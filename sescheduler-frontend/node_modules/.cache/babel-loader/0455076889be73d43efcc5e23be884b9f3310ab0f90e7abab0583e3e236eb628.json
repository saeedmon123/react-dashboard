{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/scheduler/';\nexport const loginUser = async (username, password) => {\n  try {\n    // POST the username and password to the /login/ endpoint\n    const response = await axios.post(`${API_URL}login/`, {\n      username,\n      // Ensure this is a string\n      password // Ensure this is a string\n    });\n    const user = response.data;\n    if (user.error) {\n      throw new Error(user.error);\n    }\n    return user; // Return user data if successful\n  } catch (error) {\n    console.error('Login error:', error.message);\n    throw error;\n  }\n};\n\n// Fetch all courses for a user\nexport const fetchCourses = async userId => {\n  try {\n    const response = await axios.get(`${API_URL}courses/`, {\n      params: {\n        user_id: userId\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching courses:', error);\n    throw error;\n  }\n};\n\n// Create a new course for the user\nexport const createCourse = async (userId, courseName) => {\n  try {\n    const response = await axios.post(`${API_URL}courses/`, {\n      name: courseName,\n      user_id: userId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating course:', error);\n    throw error;\n  }\n};\n\n// Fetch all tasks for a user\nexport const fetchTasks = async userId => {\n  try {\n    const response = await axios.get(`${API_URL}tasks/`, {\n      params: {\n        user_id: userId\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n    throw error;\n  }\n};\n\n// Create a new task\nexport const createTask = async (courseId, category, description) => {\n  try {\n    const response = await axios.post(`${API_URL}tasks/`, {\n      course_id: courseId,\n      category,\n      description\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating task:', error);\n    throw error;\n  }\n};\n\n// Delete a task by its ID\nexport const deleteTask = async taskId => {\n  try {\n    await axios.delete(`${API_URL}tasks/${taskId}`);\n  } catch (error) {\n    console.error('Error deleting task:', error);\n    throw error;\n  }\n};\n\n// Fetch all users (for the admin dashboard)\nexport const fetchUsers = async () => {\n  try {\n    const response = await axios.get(`${API_URL}users/`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    throw error;\n  }\n};\n\n// Create a new user\nexport const createUser = async (username, password) => {\n  try {\n    const response = await axios.post(`${API_URL}users/`, {\n      username,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating user:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","loginUser","username","password","response","post","user","data","error","Error","console","message","fetchCourses","userId","get","params","user_id","createCourse","courseName","name","fetchTasks","createTask","courseId","category","description","course_id","deleteTask","taskId","delete","fetchUsers","createUser"],"sources":["C:/Users/hp/OneDrive - Rafic Hariri University/Documents/GitHub/react-dashboard/sescheduler-frontend/src/utils/api.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/scheduler/';\r\n\r\nexport const loginUser = async (username, password) => {\r\n  try {\r\n    // POST the username and password to the /login/ endpoint\r\n    const response = await axios.post(`${API_URL}login/`, {\r\n      username,  // Ensure this is a string\r\n      password   // Ensure this is a string\r\n    });\r\n\r\n    const user = response.data;\r\n\r\n    if (user.error) {\r\n      throw new Error(user.error);\r\n    }\r\n\r\n    return user;  // Return user data if successful\r\n  } catch (error) {\r\n    console.error('Login error:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch all courses for a user\r\nexport const fetchCourses = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}courses/`, { params: { user_id: userId } });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching courses:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new course for the user\r\nexport const createCourse = async (userId, courseName) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}courses/`, { name: courseName, user_id: userId });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating course:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch all tasks for a user\r\nexport const fetchTasks = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}tasks/`, { params: { user_id: userId } });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching tasks:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new task\r\nexport const createTask = async (courseId, category, description) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}tasks/`, { course_id: courseId, category, description });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating task:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a task by its ID\r\nexport const deleteTask = async (taskId) => {\r\n  try {\r\n    await axios.delete(`${API_URL}tasks/${taskId}`);\r\n  } catch (error) {\r\n    console.error('Error deleting task:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch all users (for the admin dashboard)\r\nexport const fetchUsers = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}users/`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching users:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new user\r\nexport const createUser = async (username, password) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}users/`, { username, password });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating user:', error.response ? error.response.data : error.message);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}