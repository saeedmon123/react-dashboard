{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/scheduler/';\n\n// Helper function to set authorization headers (not needed now)\nconst getAuthHeaders = token => ({\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n});\n\n// User Login (admin or regular user)\nexport const loginUser = async (username, password) => {\n  try {\n    if (username === 'admin' && password === 'admin123') {\n      return {\n        username: 'admin',\n        isAdmin: true\n      }; // Hardcoded response for admin\n    }\n    const response = await axios.get(`${API_URL}users/`);\n    const users = response.data;\n\n    // Check if the username and password match any user\n    const user = users.find(u => u.username === username && u.password === password);\n    if (!user) {\n      throw new Error('Invalid credentials');\n    }\n    return user; // Return user data\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n// Fetch all courses for a user\nexport const fetchCourses = async userId => {\n  try {\n    const response = await axios.get(`${API_URL}courses/`, {\n      params: {\n        user_id: userId\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching courses:', error);\n    throw error;\n  }\n};\n\n// Create a new course for the user\nexport const createCourse = async (userId, courseName) => {\n  try {\n    const response = await axios.post(`${API_URL}courses/`, {\n      name: courseName,\n      user_id: userId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating course:', error);\n    throw error;\n  }\n};\n\n// Fetch all tasks for a user\nexport const fetchTasks = async userId => {\n  try {\n    const response = await axios.get(`${API_URL}tasks/`, {\n      params: {\n        user_id: userId\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n    throw error;\n  }\n};\n\n// Create a new task\nexport const createTask = async (courseId, category, description) => {\n  try {\n    const response = await axios.post(`${API_URL}tasks/`, {\n      course_id: courseId,\n      category,\n      description\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating task:', error);\n    throw error;\n  }\n};\n\n// Delete a task by its ID (make sure to export this function)\nexport const deleteTask = async taskId => {\n  try {\n    await axios.delete(`${API_URL}tasks/${taskId}`);\n  } catch (error) {\n    console.error('Error deleting task:', error);\n    throw error;\n  }\n};\n\n// Admin: Create new user (make sure to export this function)\nexport const createUser = async (username, password) => {\n  try {\n    const response = await axios.post(`${API_URL}users/`, {\n      username,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating user:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","getAuthHeaders","token","headers","Authorization","loginUser","username","password","isAdmin","response","get","users","data","user","find","u","Error","error","console","fetchCourses","userId","params","user_id","createCourse","courseName","post","name","fetchTasks","createTask","courseId","category","description","course_id","deleteTask","taskId","delete","createUser"],"sources":["C:/Users/hp/OneDrive - Rafic Hariri University/Documents/GitHub/react-dashboard/sescheduler-frontend/src/utils/api.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/scheduler/';\r\n\r\n// Helper function to set authorization headers (not needed now)\r\nconst getAuthHeaders = (token) => ({\r\n  headers: {\r\n    Authorization: `Bearer ${token}`,\r\n  },\r\n});\r\n\r\n// User Login (admin or regular user)\r\nexport const loginUser = async (username, password) => {\r\n  try {\r\n    if (username === 'admin' && password === 'admin123') {\r\n      return { username: 'admin', isAdmin: true };  // Hardcoded response for admin\r\n    }\r\n\r\n    const response = await axios.get(`${API_URL}users/`);\r\n    const users = response.data;\r\n\r\n    // Check if the username and password match any user\r\n    const user = users.find(u => u.username === username && u.password === password);\r\n    if (!user) {\r\n      throw new Error('Invalid credentials');\r\n    }\r\n    return user;  // Return user data\r\n  } catch (error) {\r\n    console.error('Login error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch all courses for a user\r\nexport const fetchCourses = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}courses/`, { params: { user_id: userId } });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching courses:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new course for the user\r\nexport const createCourse = async (userId, courseName) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}courses/`, { name: courseName, user_id: userId });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating course:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fetch all tasks for a user\r\nexport const fetchTasks = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}tasks/`, { params: { user_id: userId } });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching tasks:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new task\r\nexport const createTask = async (courseId, category, description) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}tasks/`, { course_id: courseId, category, description });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating task:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a task by its ID (make sure to export this function)\r\nexport const deleteTask = async (taskId) => {\r\n  try {\r\n    await axios.delete(`${API_URL}tasks/${taskId}`);\r\n  } catch (error) {\r\n    console.error('Error deleting task:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Admin: Create new user (make sure to export this function)\r\nexport const createUser = async (username, password) => {\r\n  try {\r\n    const response = await axios.post(\r\n      `${API_URL}users/`,\r\n      { username, password }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating user:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}