{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\OneDrive - Rafic Hariri University\\\\Desktop\\\\React Scheduler\\\\react-student-dashboard\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TodoList from './TodoList';\nimport CourseInputForm from './CourseInputForm';\nimport AddTaskForm from './AddTaskForm';\nimport usePersistentState from '../hooks/usePersistentState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [courses, setCourses] = usePersistentState('courses', []);\n  const [tasks, setTasks] = usePersistentState('tasks', {});\n  const [selectedCourse, setSelectedCourse] = useState('');\n  const [showAddTaskForm, setShowAddTaskForm] = useState(false);\n\n  // Handle course submission\n  const handleCoursesSubmit = newCourses => {\n    setCourses(newCourses);\n  };\n\n  // Add new task\n  const addTask = (course, category, task) => {\n    setTasks(prevTasks => {\n      const courseTasks = prevTasks[course] || {};\n      const updatedCategoryTasks = courseTasks[category] ? [...courseTasks[category], task] : [task];\n      const updatedTasks = {\n        ...prevTasks,\n        [course]: {\n          ...courseTasks,\n          [category]: updatedCategoryTasks\n        }\n      };\n      // Store updated tasks in local storage\n      localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n      return updatedTasks;\n    });\n  };\n\n  // Handle reset\n  const handleReset = () => {\n    if (window.confirm('Are you sure you want to reset your courses and tasks?')) {\n      setCourses([]);\n      setTasks({});\n      localStorage.removeItem('courses');\n      localStorage.removeItem('tasks');\n    }\n  };\n\n  // Show add task form\n  const handleShowAddTaskForm = () => {\n    setShowAddTaskForm(true);\n  };\n\n  // Handle adding a task\n  const handleAddTask = (course, category, task) => {\n    addTask(course, category, task);\n    setShowAddTaskForm(false);\n  };\n\n  // If there are no courses, show the course input form\n  if (courses.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No courses added yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CourseInputForm, {\n        onSubmit: handleCoursesSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Otherwise, show the dashboard with the reset option and add task button\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      children: \"Reset Courses and Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShowAddTaskForm,\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), showAddTaskForm && /*#__PURE__*/_jsxDEV(AddTaskForm, {\n      courses: courses,\n      onAddTask: handleAddTask,\n      onClose: () => setShowAddTaskForm(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), courses.map(course => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: course\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        course: course,\n        tasks: tasks[course] || {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, course, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"PnXcVo8/dsP1zOW+DFVoB41mPi0=\", false, function () {\n  return [usePersistentState, usePersistentState];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","TodoList","CourseInputForm","AddTaskForm","usePersistentState","jsxDEV","_jsxDEV","Dashboard","_s","courses","setCourses","tasks","setTasks","selectedCourse","setSelectedCourse","showAddTaskForm","setShowAddTaskForm","handleCoursesSubmit","newCourses","addTask","course","category","task","prevTasks","courseTasks","updatedCategoryTasks","updatedTasks","localStorage","setItem","JSON","stringify","handleReset","window","confirm","removeItem","handleShowAddTaskForm","handleAddTask","length","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onClick","onAddTask","onClose","map","_c","$RefreshReg$"],"sources":["C:/Users/hp/OneDrive - Rafic Hariri University/Desktop/React Scheduler/react-student-dashboard/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport TodoList from './TodoList';\r\nimport CourseInputForm from './CourseInputForm';\r\nimport AddTaskForm from './AddTaskForm';\r\nimport usePersistentState from '../hooks/usePersistentState';\r\n\r\nconst Dashboard = () => {\r\n  const [courses, setCourses] = usePersistentState('courses', []);\r\n  const [tasks, setTasks] = usePersistentState('tasks', {});\r\n  const [selectedCourse, setSelectedCourse] = useState('');\r\n  const [showAddTaskForm, setShowAddTaskForm] = useState(false);\r\n\r\n  // Handle course submission\r\n  const handleCoursesSubmit = (newCourses) => {\r\n    setCourses(newCourses);\r\n  };\r\n\r\n  // Add new task\r\n  const addTask = (course, category, task) => {\r\n    setTasks(prevTasks => {\r\n      const courseTasks = prevTasks[course] || {};\r\n      const updatedCategoryTasks = courseTasks[category]\r\n        ? [...courseTasks[category], task]\r\n        : [task];\r\n      const updatedTasks = {\r\n        ...prevTasks,\r\n        [course]: {\r\n          ...courseTasks,\r\n          [category]: updatedCategoryTasks\r\n        }\r\n      };\r\n      // Store updated tasks in local storage\r\n      localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n      return updatedTasks;\r\n    });\r\n  };\r\n\r\n  // Handle reset\r\n  const handleReset = () => {\r\n    if (window.confirm('Are you sure you want to reset your courses and tasks?')) {\r\n      setCourses([]);\r\n      setTasks({});\r\n      localStorage.removeItem('courses');\r\n      localStorage.removeItem('tasks');\r\n    }\r\n  };\r\n\r\n  // Show add task form\r\n  const handleShowAddTaskForm = () => {\r\n    setShowAddTaskForm(true);\r\n  };\r\n\r\n  // Handle adding a task\r\n  const handleAddTask = (course, category, task) => {\r\n    addTask(course, category, task);\r\n    setShowAddTaskForm(false);\r\n  };\r\n\r\n  // If there are no courses, show the course input form\r\n  if (courses.length === 0) {\r\n    return (\r\n      <div>\r\n        <h2>No courses added yet</h2>\r\n        <CourseInputForm onSubmit={handleCoursesSubmit} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Otherwise, show the dashboard with the reset option and add task button\r\n  return (\r\n    <div>\r\n      <h2>Your Dashboard</h2>\r\n      <button onClick={handleReset}>Reset Courses and Tasks</button>\r\n      <button onClick={handleShowAddTaskForm}>Add Task</button>\r\n\r\n      {showAddTaskForm && (\r\n        <AddTaskForm\r\n          courses={courses}\r\n          onAddTask={handleAddTask}\r\n          onClose={() => setShowAddTaskForm(false)}\r\n        />\r\n      )}\r\n\r\n      {courses.map(course => (\r\n        <div key={course}>\r\n          <h3>{course}</h3>\r\n          <TodoList course={course} tasks={tasks[course] || {}} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}